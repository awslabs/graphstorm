"""
    Copyright Contributors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    GraphStorm SageMaker endpoint http response for realtime inference
"""

import json


class GSRealTimeInferenceResponseMessage:
    """
    ResponseMessage provides standardized HTTP response structures for real-time inference endpoint.

    The class supports:
    - Successful responses (2XX) with result data.
    - Client-side error responses (4XX) for input validation, graph construction, and task mapping
      errors.
    - Server-side error responses (5XX) for internal failures.

    Parameters
    ----------
    status_code: int
        The HTTP status code for the response.
    request_uid: str
        A unique string ID to represent the request payload. GraphStorm's built-in method uses the
        last 16 chars of the hash code generated by "hashlib" library's "sha256()" method as the
        request payload's ID.
    message:str
        The success message to include. Default is None.
    error: str
        The error message to include. Default is None.
    data: dict
        The prediction results payload for the response. Default is None
    """
    def __init__(self,
                 status_code,
                 request_uid = None,
                 message = None,
                 error = None,
                 data = None):
        self.status_code = status_code
        self.request_uid = request_uid
        self.message = message
        self.error = error
        if data is not None:
            self.data = data
        else:
            self.data = {}

    def to_dict(self):
        """Return a dict representation for JSON serialization."""
        res = {"status_code": self.status_code}
        if self.request_uid is not None:
            res["request_uid"] = self.request_uid
        else:
            res["request_uid"] = ''
        if self.message is not None:
            res["message"] = self.message
        else:
            res["message"] = ''
        if self.error is not None:
            res["error"] = self.error
        else:
            res["error"] = ''
        if self.data is not None:
            res["data"] = self.data
        else:
            res["data"] = {}
        return res

    def to_json(self):
        """Return a JSON object as http contents"""
        return json.dumps(self.to_dict())

    @classmethod
    def success(cls, request_uid, data):
        """
        Create a successful response with data.
        """
        return cls(
            status_code = 200,
            request_uid = request_uid,
            message = "Request processed successfully.",
            data = data
        )

    @classmethod
    def json_format_error(cls, request_uid, error):
        """
        Create a response for general json format errors (400) occurred in json.load().
        """
        return cls(
            status_code=400,
            request_uid = request_uid,
            error=(
                "General JSON format error: The input payload has some JSON format error. "
                f"Details: {error}."
            )
        )

    @classmethod
    def missing_required_field(cls, request_uid, field):
        """
        Create a response for missing required field errors (401).
        """
        return cls(
            status_code=401,
            request_uid = request_uid,
            error=(
                f"Missing Required Field: The input payload missed the '{field}' field. "
                "Please refer to the GraphStorm realtime inference documentation for required "
                "fields."
            )
        )

    @classmethod
    def missing_data_in_field(cls, request_uid, field):
        """
        Create a response for missing data in a field (402).
        """
        return cls(
            status_code=402,
            request_uid = request_uid,
            error=(
                f"Missing Data in Field: The input payload contains the '{field}' field but no "
                "associated data."
            )
        )

    @classmethod
    def mismatch_target_ntype(cls, request_uid, target_ntype):
        """
        Create a response for target node type are missing in the subgraph (403)
        """
        return cls(
            status_code=403,
            request_uid = request_uid,
            error=(
                f"Mismatched target node type: the target node type: {target_ntype} does not "
                 "exist in the payload graph."
            )
        )

    @classmethod
    def mismatch_target_nid(cls, request_uid, target_nid):
        """
        Create a response for target node indexes are missing in the subgraph (404)
        """
        return cls(
            status_code=404,
            request_uid = request_uid,
            error=(
                f"Mismatched target node IDs: the target node ID: {target_nid} does not "
                 "exist in the payload graph."
            )
        )

    @classmethod
    def missing_feature(cls, request_uid, entity_type, entity_name, feat_name):
        """
        Create a response for node or edge feature names are missing in the subgraph (404)
        """
        return cls(
            status_code=404,
            request_uid = request_uid,
            error=(
                f"Missng {entity_type} Feature: the {entity_name} {entity_type}s does not "
                f"contain model required feature: {feat_name}. "
            )
        )

    @classmethod
    def graph_construction_failure(cls, request_uid, track):
        """
        Create a response for graph construction failures (411).
        """
        return cls(
            status_code = 411,
            request_uid = request_uid,
            error = (
                "Graph Construction Failure: Failed to construct a DGL graph from the http "
                f"payload. Details: {track}"
            )
        )

    @classmethod
    def task_mismatch_error(cls, request_uid, track):
        """
        Create a response for model/data mismatch errors (421).
        """
        return cls(
            status_code = 421,
            request_uid = request_uid,
            error = (
                "Task Mismatch: Input payload\'s task mismatches with the endpoint model. " \
                f"Details: {track}"
            )
        )

    @classmethod
    def internal_server_error(cls, request_uid, detail):
        """
        Create a generic internal server error response (500).
        """
        msg = "Internal Server Error: Please contact with your endpoint " + \
              "administrators for this error. "
        if detail:
            msg += f"Details: {detail}"
        return cls(
            status_code=500,
            request_uid = request_uid,
            error=msg
        )
